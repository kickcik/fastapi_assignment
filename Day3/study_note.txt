1. orjson
- 파이썬 내장 json 라이브러리에 비해 속도가 빠르다.
- 실제로 timeit으로 비교하니 6배 이상 빨랐다.

2. router
- app 내에 router라는 폴더를 만들어 클라이언트에서 요청하는 엔드포인트에 대한 API의 응답을 관리하는 파일을 만들었다.
- 실제로 Day1에는 main에 라우터의 기능을 넣어서 API를 구현했는데, 뭔가 난잡하고, 확장시에 비대해질 코드들이 눈에 선명했다.
- 그러나 이렇게 라우터를 분리하여 관리하면, 엔드포인트별로 기능을 분리하여 작성할 수 있고, 시인성도 좋아져서 이전보다 더 나아진 것 같다.
- FASTAPI에서 라우터에 @some_router('/way')와 같이 decorate되는 것의 이름은 "path operation function"이다.
- path operation function 내 속성인 description을 사용하면 swagger ui에서 각 api에 대한 설명을 넘겨줄 수 있다.

3. DTO (Data Transfer Object, 데이터 전송 객체)
- data를 전달하기 위한 목적으로 존재한다.
- dict를 사용하지 않는 이유는 swagger ui에서 api가 무엇을 받고 반환하는지 애매하기 때문이다.
- 프론트에서 각 api가 어떤것을 받고 반환하는지 명확하게 전달하기 위해 DTO 사용이 권장된다.
- 또한 dict 사용시 예정되지 않은 key에 대한 오류를 파악하기 쉽지 않다.

4. BASE, uuid (Universally Unique Identifier, 범용 고유 식별자)
- 선택되는 문자들이 62개면, BASE62라고 부른다. 알파벳 대,소문자 26개 + 26개, 0~9 10개 => 62개
- BASE가 encode하는 방법
    - 주어진 정수를 BASE의 문자들 개수로 나눠 몫과 나머지를 구한다.
    - BASE에서 나머지 번째 문자를 기록한다.
    - 몫이 0이 될 때까지 반복한다.
- uuid는 결정론적인 식별자다.
- uuid4와 BASE를 사용해 적당한 길이의 식별자를 생성했다.

5. 디버깅 (★*10**8)
- 코드의 흐름을 하나씩 따라가면서 논리적 오류를 발견하는 방법
- 그저 GOAT 기능